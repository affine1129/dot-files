[[plugins]]
repo = 'sainnhe/everforest'

[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
depends = ['nvim-tree/nvim-web-devicons']
lua_add = '''
local lsp_names = function()
  local clients = {}
  for _, client in ipairs(vim.lsp.get_active_clients { bufnr = 0 }) do
    if client.name == 'null-ls' then
      local sources = {}
      for _, source in ipairs(require('null-ls.sources').get_available(vim.bo.filetype)) do
        table.insert(sources, source.name)
      end
      table.insert(clients, 'null-ls(' .. table.concat(sources, ', ') .. ')')
    else
      table.insert(clients, client.name)
    end
  end
  return ' ' .. table.concat(clients, ', ')
end

require('lualine').setup {
  options = {
    theme = 'everforest'
  },
  sections = {
    lualine_a = {
      {
        'datetime',
        -- options: default, us, uk, iso, or your own format string ("%H:%M", etc..)
        style = '%Y/%m/%d(%A) %H:%M'
      }
    },
    lualine_b = { 'branch', 'diff', 'diagnostics' },
    lualine_x = { lsp_names },
    lualine_y = { 'encoding', 'fileformat', 'filetype' },
    lualine_z = { 'progress', 'location' },
  }
}
'''

[[plugins]]
repo = 'p00f/nvim-ts-rainbow'
depends = ['nvim-treesitter/nvim-treesitter']

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
lua_add = '''
require("nvim-treesitter.configs").setup {
  ensure_installed = {"toml", "python", "typescript", "html", "markdown"},
  auto_install = true,
  sync_install = false,
  highlight = {
    enable = true,
  },
  rainbow = {
    enable = true,
    extended_mode = true,
    max_file_lines = nil,
    colors = {
      "#f6dcbc",
      "#bcf6bf",
      "#bcf3f6",
      "#bfbcf6",
      "#f6bcf6",
    }
  }
}
'''

[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'

[[plugins]]
repo = 'akinsho/bufferline.nvim'
lua_add = '''
vim.opt.termguicolors = true
require("bufferline").setup{
  options = {
    mode = "tabs",
    color_icons = true
  }
}
'''

[[plugins]]
repo = 'akinsho/toggleterm.nvim'
lua_add = '''
local status, toggleterm = pcall(require, "toggleterm")
if not status then
  return
end

toggleterm.setup({
  open_mapping = [[<C-t>]],
  hide_numbers = true,
  direction = "horizontal",
  shell = vim.o.shell,
  size = 25
})

function _G.set_terminal_keymaps()
  local opts = { buffer = 0 }
  vim.keymap.set('t', '<C-j><C-j>', [[<C-\><C-n>]], opts)
  vim.keymap.set('t', '<C-k>', [[<Cmd>wincmd k<CR>]], opts)
  vim.keymap.set('t', '<C-h>', [[<Cmd>wincmd h<CR>]], opts)
  vim.keymap.set('t', '<C-l>', [[<Cmd>wincmd l<CR>]], opts)
end
vim.cmd('autocmd! TermOpen term://* lua set_terminal_keymaps()')

local Terminal = require("toggleterm.terminal").Terminal

local lazygit = Terminal:new({
  cmd = "lazygit",
  direction = "float",
  hidden = true,
  count = 6
})
function _lazygit_toggle()
  lazygit:toggle()
end
vim.api.nvim_set_keymap("n", "<C-S-g>", "<cmd>lua _lazygit_toggle()<CR>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("t", "<C-S-g>", "<cmd>lua _lazygit_toggle()<CR>", { noremap = true, silent = true })

local lazydocker = Terminal:new({
  cmd = "lazydocker",
  direction = "float",
  hidden = true,
  count = 7
})
function _lazydocker_toggle()
  lazydocker:toggle()
end
vim.api.nvim_set_keymap("n", "<C-S-d>", "<cmd>lua _lazydocker_toggle()<CR>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("t", "<C-S-d>", "<cmd>lua _lazydocker_toggle()<CR>", { noremap = true, silent = true })

'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
"" git操作

" g]で前の変更箇所へ移動する
nnoremap g[ :GitGutterPrevHunk<CR>
" g[で次の変更箇所へ移動する
nnoremap g] :GitGutterNextHunk<CR>

" ghでdiffをハイライトする
nnoremap gh :GitGutterLineHighlightsToggle<CR>
" gpでカーソル行のdiffを表示する
nnoremap gp :GitGutterPreviewHunk<CR>

" 記号の色を変更する
highlight GitGutterAdd ctermfg=green
highlight GitGutterChange ctermfg=blue
highlight GitGutterDelete ctermfg=red

"" 反映時間を短くする(デフォルトは4000ms)
set updatetime=250
'''

[[plugins]]
repo = 'APZelos/blamer.nvim'
hook_add = '''
let g:blamer_enabled=1
let g:blamer_show_in_visual_modes=0
let g:blamer_show_in_insert_modes=0
let g:blamer_delay = 500
'''

[[plugins]]
repo = 'jacoborus/tender.vim'

[[plugins]]
repo = 'thinca/vim-visualstar'

[[plugins]]
repo = 'preservim/nerdcommenter'
hook_add = '''
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

let g:NERDDefaultAlign='left'

nnoremap <leader>cc <plug>NERDCommenterToggle 
vnoremap <leader>cc <plug>NERDCommenterToggle 
nnoremap <leader>c<space> <plug>NERDCommenterComment
vnoremap <leader>c<space> <plug>NERDCommenterComment
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nnoremap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = "neoclide/coc.nvim"
merge = 0
rev = "release"
on_ft = ['python']

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
'''

[[plugins]]
repo = 'yuki-yano/fern-preview.vim'
depends = ['lambdalisue/fern.vim']
hood_add = '''
'''

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'
depends = ['lambdalisue/fern.vim']

[[plugins]]
repo = 'lambdalisue/fern-bookmark.vim'
hook_add = '''
'''

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
hook_add = '''
let g:fern#renderer = 'nerdfont'
'''

[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'
hook_add = '''
augroup my-glyph-palette
  autocmd! *
  autocmd FileType fern call glyph_palette#apply()
augroup END
'''

[[plugins]]
repo = 'vimtry1/today.vim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
# https://github.com/nvim-telescope/telescope.nvim
repo = 'nvim-telescope/telescope.nvim'
lua_add = '''
local builtin = require('telescope.builtin')
vim.keymap.set('n', 'ff', builtin.find_files, {})
vim.keymap.set('n', 'fg', builtin.git_files, {})
vim.keymap.set('n', 'fp', builtin.live_grep, {})
vim.keymap.set('n', 'fb', builtin.buffers, {})
vim.keymap.set('n', 'fh', builtin.help_tags, {})
'''

[[plugins]]
# https://github.com/lukas-reineke/indent-blankline.nvim
repo = 'lukas-reineke/indent-blankline.nvim'
lua_add = '''
require("indent_blankline").setup {
  space_char_blankline = " ",
  show_current_context = true,
  show_current_context_start = true,
}
'''

[[plugins]]
# https://github.com/monaqa/dial.nvim
repo = 'monaqa/dial.nvim'
lua_add = '''
vim.keymap.set("n", "<C-a>", function()
  require("dial.map").manipulate("increment", "normal")
end)
vim.keymap.set("n", "<C-x>", function()
  require("dial.map").manipulate("decrement", "normal")
end)
vim.keymap.set("n", "g<C-a>", function()
  require("dial.map").manipulate("increment", "gnormal")
end)
vim.keymap.set("n", "g<C-x>", function()
  require("dial.map").manipulate("decrement", "gnormal")
end)
vim.keymap.set("v", "<C-a>", function()
  require("dial.map").manipulate("increment", "visual")
end)
vim.keymap.set("v", "<C-x>", function()
  require("dial.map").manipulate("decrement", "visual")
end)
vim.keymap.set("v", "g<C-a>", function()
  require("dial.map").manipulate("increment", "gvisual")
end)
vim.keymap.set("v", "g<C-x>", function()
  require("dial.map").manipulate("decrement", "gvisual")
end)
local augend = require("dial.augend")
require("dial.config").augends:register_group{
  default = {
    augend.date.alias["%Y/%m/%d"],
    augend.date.alias["%m/%d"],
    augend.date.alias["%-m/%-d"],
    augend.date.alias["%Y-%m-%d"],
    augend.date.alias["%Y年%-m月%-d日"],
    augend.date.alias["%H:%M:%S"],
    augend.date.alias["%H:%M"],
    augend.constant.alias.ja_weekday,
    augend.constant.alias.ja_weekday_full,
    augend.constant.alias.alpha,
    augend.constant.alias.Alpha,
    -- uppercase hex number (0x1A1A, 0xEEFE, etc.)
    augend.constant.new{
      elements = {"and", "or"},
      word = true, -- if false, "sand" is incremented into "sor", "doctor" into "doctand", etc.
      cyclic = true, -- "or" is incremented into "and".
    },
    augend.constant.new{
      elements = {"&&", "||"},
      word = false,
      cyclic = true,
    },
    augend.constant.new{
      elements = {"true", "false"},
      word = true,
      cyclic = true,
    },
    augend.constant.new{
      elements = {"True", "False"},
      word = true,
      cyclic = true,
    },
  },
}
'''

[[plugins]]
# https://github.com/kyledhui/nvim-surround
repo = 'kyledhui/nvim-surround'
lua_add = '''
require("nvim-surround").setup()
'''
